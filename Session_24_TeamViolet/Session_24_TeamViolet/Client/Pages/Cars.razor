@page "/cars"
@using CarService.Models.Entities
@using Session_24_TeamViolet.Shared
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime



<h3>Create A Car</h3>
<EditForm class="mb-4" Model="@carView">
    <InputSelect @bind-Value="carView.Brand" style="height: 30px;">
        @foreach (var brand in Enum.GetValues(typeof(BrandEnum))){
            <option value="@brand">@brand</option>
        }
    </InputSelect>
    <input @bind=carView.Model placeholder="Model Name" />
    <input @bind=carView.RegNum placeholder="Registration Number" />
    <button class="btn btn-primary" @onclick="AddCar" >Add Car</button>
</EditForm>




<h3>Car List</h3>
@if (!_loaded) {
    <p>Loading ...</p>
}
else {
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Brand</th>
                <th>Model</th>
                <th>Registration Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if(activeCars){
                            @foreach (var car in _carList.Where(x => x.Status==activeCars)){
                               <tr>
                                 <td>
                                     <EditForm Model="@car">
                                         <InputSelect @bind-Value="car.Brand" style="height: 30px;">
                                                 @foreach (var brand in Enum.GetValues(typeof(BrandEnum))) {
                                                    <option value="@brand">@brand</option>
                                                }
                                        </InputSelect>
                                    </EditForm>
                                    </td>
                                <td><input @bind="car.Model"/></td>
                                <td><input @bind="car.RegNum"/></td>
                                <td>
                                <button class="btn btn-success" @onclick="() => SaveCar(car)">Save</button>
                                <button class="btn btn-danger" @onclick="() => DeleteCar(car)">Delete</button>
                                </td>
                            </tr>

                             }  
                            <button class="btn btn-warning mt-5" @onclick="ReverseActivateCars">Show Deleted Cars</button>

            }else{
                             @foreach (var car in _carList.Where(x => x.Status==activeCars)){
                               <tr>  
                                <td><input @bind="car.Brand" readonly/></td>
                                <td><input @bind="car.Model" readonly/></td>
                                <td><input @bind="car.RegNum" readonly /></td>
                                <td> <button class="btn btn-danger" @onclick="() => DeleteCar(car)">Undo</button></td>
                            </tr>
                             }                
                            <button class="btn btn-warning mt-5" @onclick="ReverseActivateCars">Back</button>
        }
        </tbody>
    </table>
}

@code {
    private bool activeCars = true;
    private string _model { get; set; }
    private string _regNum { get; set; }
    private BrandEnum _brand { get; set;}
    List<CarViewModel> _carList = new ();
    private CarViewModel carView = new();
    bool _loaded = false;


    protected override async Task OnInitializedAsync() {
        await LoadCarsFromServer();
        _loaded = true;
    }



    private async Task LoadCarsFromServer()
    {
        _carList = await httpClient.GetFromJsonAsync<List<CarViewModel>>("cars/getall");
    }


    async Task AddCar() {
        if (string.IsNullOrWhiteSpace(carView.Model)) return;
        if (string.IsNullOrWhiteSpace(carView.RegNum)) return;
        //var car = new CarViewModel(){
        //        ID = Guid.NewGuid(),
        //        Brandl= carView.Brand,
        //        Model= carView.Model,
        //        RegNum=carView.RegNum
        //    };

        await httpClient.PostAsJsonAsync("cars", carView);
        carView.Model = null;
        carView.RegNum = null;
        await LoadCarsFromServer();
    }



    async Task DeleteCar(CarViewModel car)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"cars/{car.ID}");
            response.EnsureSuccessStatusCode();
            await LoadCarsFromServer();
        }
    }

    async Task SaveCar(CarViewModel car)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.PutAsJsonAsync("cars", car);
            response.EnsureSuccessStatusCode();
            await LoadCarsFromServer();
        }
    }



    async Task ModelChanged(ChangeEventArgs e, CarViewModel car)
    {
        car.Model = e.Value?.ToString();
        var response = await httpClient.PutAsJsonAsync("cars", car);
        response.EnsureSuccessStatusCode();
        //await LoadItemsFromServer();
    }

    async Task RegNumChanged(ChangeEventArgs e, CarViewModel car)
    {
        car.RegNum = e.Value?.ToString();
        var response = await httpClient.PutAsJsonAsync("cars", car);
        response.EnsureSuccessStatusCode();
        //await LoadItemsFromServer();
    }

    async Task ReverseActivateCars() {
        activeCars = !activeCars;
    }

}