@page "/managers"
@using Session_24_TeamViolet.Shared.ViewModels
@using CarService.Models.Entities
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime


<h3>Create A Manager</h3>
<EditForm class="mb-4"Model="@_managerView">
    <input @bind=_managerView.Name placeholder="Name" />
    <input @bind=_managerView.Surname placeholder="Surname" />
    <input type="number" step="0.01" @bind=_managerView.SalaryPerMonth placeholder="Salary" />
    <button class="btn btn-primary" @onclick="AddManager" >Add Manager</button>
</EditForm>


<h3>Manager List</h3>
@if (!_loaded)
{
    <p>Loading ...</p>
}
else{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Salary Per Month</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (activeManagers) {
                @foreach (var manager in _managerList.Where(x=>x.Status==activeManagers)) {
                    <tr>
                        <td><input @bind="manager.Name"/></td>
                        <td><input @bind="manager.Surname"/></td>
                        <td><input @bind="manager.SalaryPerMonth"/></td>
                        <td><button class="btn btn-success" @onclick="() => SaveManager(manager)">Save</button></td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteManager(manager)">Delete</button></td>
                    </tr>
                }
                   <button class="btn btn-warning mt-5" @onclick="ReverseActiveManagers">Show Deleted Managers</button>
            }
            else {
                @foreach (var manager in _managerList.Where(x=>x.Status==activeManagers)) {
                    <tr>
                        <td><input @bind="manager.Name" readonly/></td>
                        <td><input @bind="manager.Surname" readonly/></td>
                        <td><input @bind="manager.SalaryPerMonth" readonly/></td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteManager(manager)">Undo</button></td>
                    </tr>
                }
                <button class="btn btn-warning mt-5" @onclick="ReverseActiveManagers">Back</button>
            }



        </tbody>
    </table>
}







    
@code{

    private List<ManagerViewModel> _managerList = new();
    private ManagerViewModel _managerView = new();
    private bool _loaded = false;
    private bool activeManagers = true;



    protected override async Task OnInitializedAsync() {
        await LoadManagersFromServer();
        _loaded = true;
    }



    private async Task LoadManagersFromServer()
    {
        _managerList = await httpClient.GetFromJsonAsync<List<ManagerViewModel>>("managers/getall");
    }


    async Task AddManager() {
        if (string.IsNullOrWhiteSpace(_managerView.Name)) return;
        if (string.IsNullOrWhiteSpace(_managerView.Surname)) return;


        await httpClient.PostAsJsonAsync("managers", _managerView);
        _managerView.Name = null;
        _managerView.Surname = null;
        _managerView.SalaryPerMonth = 0;
        await LoadManagersFromServer();
    }

    async Task DeleteManager(ManagerViewModel manager)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.DeleteAsync($"managers/{manager.ID}");
            response.EnsureSuccessStatusCode();
            await LoadManagersFromServer();            
        }
    }

    async Task SaveManager(ManagerViewModel manager)
    {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        if (confirm)
        {
            var response = await httpClient.PutAsJsonAsync("managers", manager);
            response.EnsureSuccessStatusCode();
            await LoadManagersFromServer();
        }
    }

        async Task ReverseActiveManagers() {
        activeManagers = !activeManagers;
    }


}
