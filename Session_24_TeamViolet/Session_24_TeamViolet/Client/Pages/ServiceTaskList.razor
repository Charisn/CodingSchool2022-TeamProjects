@page "/servicetasklist"
@inject HttpClient httpClient
@inject NavigationManager navManager

<h3>ServiceTask</h3>

<a href="newtask" class="btn btn-primary">New</a>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Code</th>
            <th>Description</th>
            <th>Hours</th>
        </tr>
    </thead>
    <tbody>
        @if (_isLoading)
        {
            <tr>
                <td><div class="spinner-border" role="status"></div></td>
                <td><div class="spinner-border" role="status"></div></td>
                <td><div class="spinner-border" role="status"></div></td>
                <td><div class="spinner-border" role="status"></div></td>
            </tr>
        }
        @if(_serviceTasks is not null)
        {
            @foreach(var task in _serviceTasks)
            {
                <tr>
                    <td>@task.Code</td>
                    <td>@task.Description</td>
                    <td>@task.Hours</td>
                    @if (!_deletedList)
                    {
                    <td>
                        <button class="btn btn-primary me-1" @onclick="()=> EditServiceTask(task)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=>DeleteServiceTask(task)">Delete</button>
                    </td>
                    }
                    else
                    {
                        <td>
                            <button class="btn btn-danger me-1" @onclick="()=> UndoServiceTask(task)">Undo</button>
                        </td>
                    }                  
                </tr>
            }
            if (!_deletedList)
            {
                <button class="btn btn-warning mt-5" @onclick="ShowDeletedServiceTasks">Show Deleted Service Tasks</button>
            }
            else
            {
                <button class="btn btn-warning mt-5" @onclick="GoBack">Back</button>
            }

        }
    </tbody>
</table>


@code {
    private List<ServiceTaskViewModel>? _serviceTasks { get; set; }
    private bool _isLoading { get; set; } = true;
    private bool _deletedList { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        _serviceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskViewModel>>("servicetask");
        _isLoading = false;
    }

    private void EditServiceTask(ServiceTaskViewModel task)
    {
        navManager.NavigateTo($"/newtask/{task.ID}", false);
    }

    private async void DeleteServiceTask(ServiceTaskViewModel task)
    {
        await httpClient.DeleteAsync($"/servicetask/{task.ID}");
        _serviceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskViewModel>>("servicetask");
        this.StateHasChanged();
    }

    private async void ShowDeletedServiceTasks()
    {
        _serviceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskViewModel>>("servicetask/inactive");
        _deletedList = true;
        this.StateHasChanged();
    }

    private async void UndoServiceTask(ServiceTaskViewModel task)
    {
        task.Status = true;
        await httpClient.PutAsJsonAsync<ServiceTaskViewModel>("servicetask", task);
        _serviceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskViewModel>>("servicetask/inactive");
        this.StateHasChanged();
    }

    private async void GoBack()
    {
        _deletedList = false;
        _serviceTasks = await httpClient.GetFromJsonAsync<List<ServiceTaskViewModel>>("servicetask");
        this.StateHasChanged();
    }

}
