@page "/transactions"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using Session_24_TeamViolet.Shared


<h3>Transactions</h3>

<a @onclick="OpenLoginForm" class="btn btn-primary">New</a>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>Date</th>
            <th>Customer</th>
            <th>Car</th>
            <th>Manager</th>
            <th>Total Price</th>
        </tr>
    </thead>
    <tbody>
        @if (_transactions is not null && Customers is not null && Cars is not null && Customers is not null  )
        {
            @foreach (var transaction in _transactions)
            {
                <tr>
                    <td>@transaction.Date</td>            
                    <td>@Customers.Find(x => x.ID == transaction.CustomerID).Name - @Customers.Find(x=> x.ID == transaction.CustomerID).Surname</td>                    
                    <td>@Cars.Find(x => x.ID == transaction.CarID).Brand - @Cars.Find(x => x.ID == transaction.CarID).Model </td>
                    <td>@Managers.Find(x=> x.ID == transaction.ManagerID).Name</td>
                    <td>@transaction.TotalPrice</td>
                    <td><a @onclick="()=>DeleteTransaction(transaction)" class="btn btn-danger">Delete</a></td>
                </tr>
            }
        }        
    </tbody>
</table>

@code {
    private List<TransactionViewModel> _transactions { get; set; } = new();
    private List<CarViewModel>? Cars { get; set; }
    private List<CustomerViewModel>? Customers { get; set; }
    private List<ManagerViewModel>? Managers { get; set; }

    private CarViewModel _currentCar {get; set;}

    protected override async Task OnInitializedAsync()
    {
        _transactions = await httpClient.GetFromJsonAsync<List<TransactionViewModel>>("transaction");
        Cars = await httpClient.GetFromJsonAsync<List<CarViewModel>>("cars/getall");
        Customers = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>("customer/GetAllCust");
        Managers = await httpClient.GetFromJsonAsync<List<ManagerViewModel>>("managers/getall");

        //foreach (var item in _transactions)
        //{
        //    Customers.Find(x => x.ID == item.CustomerID);
        //}

    }


    // void AddTransaction() {
    //    navigationManager.NavigateTo($"/transaction/newtransaction");
    //}

    void OpenLoginForm()
    {
         navigationManager.NavigateTo($"/transaction/loginform");
    }

    //async Task EditItem(TransactionViewModel transactionViewModel)
    //{
    //navigationManager.NavigateTo($"/todolist/edit/{transactionViewModel.Id}");
    //}


    async Task DeleteTransaction(TransactionViewModel model) {
        await httpClient.DeleteAsync($"transaction/{model.Id}");
        _transactions = await httpClient.GetFromJsonAsync<List<TransactionViewModel>>("transaction");
    }





}
